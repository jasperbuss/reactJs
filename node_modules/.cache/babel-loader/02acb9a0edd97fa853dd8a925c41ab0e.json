{"ast":null,"code":"import _classCallCheck from \"/home/jasper/reactJs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jasper/reactJs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jasper/reactJs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jasper/reactJs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jasper/reactJs/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jasper/reactJs/src/components/common/TableBody.jsx\";\nimport React, { Component } from \"react\"; //import { Liked } from \"./common/like\";\n\nimport _ from \"lodash\";\n\nvar TableBody =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TableBody, _Component);\n\n  function TableBody() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TableBody);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableBody)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderCell = function (item, column) {\n      if (column.content) return column.content(item);\n      return _.get(item, column.path); //hier nochmal nachgucken \n    };\n\n    return _this;\n  }\n\n  _createClass(TableBody, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          columns = _this$props.columns;\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, data.map(function (item) {\n        return React.createElement(\"tr\", {\n          key: item._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, columns.map(function (column) {\n          return React.createElement(\"td\", {\n            key: item._id + (column.path || column.key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18\n            },\n            __self: this\n          }, _this2.renderCell(item, column));\n        }));\n      }));\n    }\n  }]);\n\n  return TableBody;\n}(Component);\n\nexport default TableBody;","map":{"version":3,"sources":["/home/jasper/reactJs/src/components/common/TableBody.jsx"],"names":["React","Component","_","TableBody","renderCell","item","column","content","get","path","props","data","columns","map","_id","key"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,CAAP,MAAc,QAAd;;IAEMC,S;;;;;;;;;;;;;;;;;;UACJC,U,GAAa,UAACC,IAAD,EAAOC,MAAP,EAAkB;AAC7B,UAAIA,MAAM,CAACC,OAAX,EAAoB,OAAOD,MAAM,CAACC,OAAP,CAAeF,IAAf,CAAP;AAEpB,aAAOH,CAAC,CAACM,GAAF,CAAMH,IAAN,EAAYC,MAAM,CAACG,IAAnB,CAAP,CAH6B,CAGI;AACjC,K;;;;;;;6BACO;AAAA;;AAAA,wBACmB,KAAKC,KADxB;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,OADP,eACOA,OADP;AAEP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,IAAI,CAACE,GAAL,CAAS,UAAAR,IAAI;AAAA,eACZ;AAAI,UAAA,GAAG,EAAEA,IAAI,CAACS,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGF,OAAO,CAACC,GAAR,CAAY,UAAAP,MAAM;AAAA,iBACjB;AAAI,YAAA,GAAG,EAAED,IAAI,CAACS,GAAL,IAAYR,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACS,GAAlC,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,MAAI,CAACX,UAAL,CAAgBC,IAAhB,EAAsBC,MAAtB,CADH,CADiB;AAAA,SAAlB,CADH,CADY;AAAA,OAAb,CADH,CADF;AAaD;;;;EArBqBL,S;;AAwBxB,eAAeE,SAAf","sourcesContent":["import React, { Component } from \"react\";\n//import { Liked } from \"./common/like\";\nimport _ from \"lodash\";\n\nclass TableBody extends Component {\n  renderCell = (item, column) => {\n    if (column.content) return column.content(item);\n\n    return _.get(item, column.path); //hier nochmal nachgucken \n   };\n  render() {\n    const { data, columns } = this.props;\n    return (\n      <tbody>\n        {data.map(item => (\n          <tr key={item._id}>\n            {columns.map(column => (\n              <td key={item._id + (column.path || column.key)}>\n                {this.renderCell(item, column)}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    );\n  }\n}\n\nexport default TableBody;\n"]},"metadata":{},"sourceType":"module"}